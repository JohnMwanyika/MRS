extends dashLayout 
block content
    main
        if (errorMessage)
            .alert.alert-danger(role="alert")
                <i class="fa-solid fa-circle-xmark"></i> 
                |  #{errorMessage}
        if (successMessage)
            .alert.alert-success(role="alert")
                <i class="fa-solid fa-circle-check"></i> 
                |  #{successMessage}
        .container-fluid.px-4
            h1.mt-4 #{title}
            ol.breadcrumb.mb-4
                li.breadcrumb-item.active #{title}
            if (user.Role.name == 'Super Admin')
                .card.mb-4
                    .card-header
                        i.fas.fa-table.me-1
                        |  All users
                        button.btn.btn-outline-primary.float-end(type="button" data-bs-toggle="modal" data-bs-target=`#staticBackdrop`)
                            i.fas.fa-user-plus.me-1
                        | New
                        include includes/newUserModal
                    .card-body
                        table#newMails
                            thead
                                tr
                                    th First Name
                                    th Last Name
                                    th Email
                                    th Phone
                                    th Status 
                                        span.spinner-border.spinner-border-sm.mr-2.d-none(aria-hidden="true")#spinner
                                    th Role
                                    th Action
                            tfoot
                                tr
                                    th First Name
                                    th Last Name
                                    th Email
                                    th 
                                        i.fas.fa-phone.text-muted 
                                        | Phone
                                    th Status
                                    th Role
                                    //- th Action
                            tbody
                                each user in data
                                    tr
                                        td=user.firstName
                                        td=user.lastName
                                        td 
                                            b
                                                a.link-underline-light(href="#" data-bs-toggle="modal" data-bs-target=`#staticBackdrop${user.id}` style="text-decoration:false;")
                                                    i.fa-solid.fa-paper-plane 
                                                    |  #{user.email}
                                        if (user.phone)
                                            td 
                                                i.fa-solid.fa-phone.text-muted 
                                                |  #{user.phone}
                                        else 
                                            td.text-center ---
                                        if (user.UserStatus.name == 'Active')
                                            td.text-center
                                                .form-check.form-switch
                                                    input.form-check-input#switch(type="checkbox" role="switch" onchange=`handleCheckboxChange(${user.id},this)` checked)
                                                    label.form-check-label(for="switch" id=`switch-state${user.id}`) Active 
                                        else 
                                            td.text-center
                                                .form-check.form-switch
                                                    input.form-check-input#switch(type="checkbox" role="switch" onchange=`handleCheckboxChange(${user.id},this)`)
                                                    label.form-check-label(for="switch" id=`switch-state${user.id}`) Inactive

                                        if (user.Role.name == "Super Admin")        
                                            td 
                                                i.fa-solid.fa-user-tie.text-muted  
                                                |  #{user.Role.name}
                                        else
                                            td 
                                                i.fa-solid.fa-user.text-muted 
                                                |  #{user.Role.name}
                                        td
                                            .btn-group
                                                button.btn.btn-light.btn-sm.dropdown-toggle.border(type="button" data-bs-toggle="dropdown" aria-expanded="false").

                                                    Actions |

                                                ul.dropdown-menu
                                                    li
                                                        a.dropdown-item(href="#").text-muted.text-center.border-bottom
                                                            | Actions
                                                    li
                                                        a.dropdown-item.btn(href="#" data-bs-toggle="modal" data-bs-target=`#staticBackdrop${user.id}`).border-bottom
                                                            <i class="fa-solid fa-user-pen text-muted"></i> 
                                                            | Edit
                                                    li
                                                        button.btn(type='button' onclick=`resetUserPassword(${user.id})`).border-bottom
                                                            <i class="fa-solid fa-arrow-rotate-left text-muted"></i> 
                                                            | Reset Password

                                                    if (user.UserStatus.name == "Inactive")
                                                        li
                                                            a.dropdown-item(href="#").border-bottom
                                                                <i class="fa-solid fa-user-check text-muted"></i> 
                                                                | Activate
                                                    else
                                                        li
                                                            a.dropdown-item(href="#").text-danger
                                                                <i class="fa-solid fa-user-large-slash"></i> 
                                                                | Deactivate
                                        //- Edit user modal                   
                                        include includes/userModal.pug
                                //- script.
                                //-     toastr.options = {
                                //-         "closeButton": true,
                                //-         "debug": false,
                                //-         "newestOnTop": false,
                                //-         "progressBar": true,
                                //-         "positionClass": "toast-top-center",
                                //-         "preventDuplicates": false,
                                //-         "onclick": null,
                                //-         "showDuration": "300",
                                //-         "hideDuration": "1000",
                                //-         "timeOut": "5000",
                                //-         "extendedTimeOut": "1000",
                                //-         "showEasing": "swing",
                                //-         "hideEasing": "linear",
                                //-         "showMethod": "fadeIn",
                                //-         "hideMethod": "fadeOut"
                                //-     };

                                //-     function resetUserPassword(userId){

                                //-         axios.post('/dashboard/users/reset_password',{userId:userId});
                                //-         .then((response)=>{
                                //-             console.log(response);
                                //-             toastr[response.data.status](response.data.data, response.data.status);
                                //-         })
                                //-         .catch((error)=>{
                                //-             console.log(response);
                                //-             toastr[response.data.status](response.data.data, response.data.status);
                                //-         });
                                //-     };
                                //-     toastr.options = {
                                //-         "closeButton": true,
                                //-         "debug": false,
                                //-         "newestOnTop": false,
                                //-         "progressBar": true,
                                //-         "positionClass": "toast-top-center",
                                //-         "preventDuplicates": false,
                                //-         "onclick": null,
                                //-         "showDuration": "300",
                                //-         "hideDuration": "1000",
                                //-         "timeOut": "5000",
                                //-         "extendedTimeOut": "1000",
                                //-         "showEasing": "swing",
                                //-         "hideEasing": "linear",
                                //-         "showMethod": "fadeIn",
                                //-         "hideMethod": "fadeOut"
                                //-     };


                                //-     function handleCheckboxChange(checkbox,userId) {
                                //-         if (checkbox.checked) {
                                //-             axios.post(`/dashboard/users/update_status/${userId}`,{statusId:1})
                                //-             .then((response)=>{
                                //-                 toastr[response.data.status](response.data.data, response.data.status);
                                //-                 setTimeout(() => {
                                //-                     location.reload();
                                //-                 }, 2000);
                                //-                 console.log(response);
                                //-             })

                                //-         } else {
                                //-             axios.post(`/dashboard/users/update_status/${userId}`,{statusId:2})
                                //-             .then((response)=>{
                                //-                 toastr[response.data.status](response.data.data, response.data.status);
                                //-                 setTimeout(() => {
                                //-                     location.reload();
                                //-                 }, 2000);
                                //-                 console.log(response);
                                //-             })
                                //-         }
                                //-     }


            else 
                .card.mb-4
                    .card-header
                        i.fas.fa-table.me-1
                        |  Busted!! Only Super Admins can access User Management

//- //- Button trigger modal 
//- button.btn.btn-primary(type="button" data-bs-toggle="modal" data-bs-target="#staticBackdrop").
//-     Launch static backdrop modal